<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fl="clr-namespace:FlyleafLib.Controls.WPF;assembly=FlyleafLib"
                    xmlns:flwpf="clr-namespace:FlyleafLib.Controls.WPF"
                    
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    >
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />-->
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.CheckBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DialogHost.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TabControl.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Thumb.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollBar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollViewer.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Slider.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />

         <!--primary color--> 
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Orange.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="{StaticResource Primary100}"/>
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="{StaticResource Primary100Foreground}"/>
            <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{StaticResource Primary500}"/>
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="{StaticResource Primary500Foreground}"/>
            <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{StaticResource Primary700}"/>
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="{StaticResource Primary700Foreground}"/>
        </ResourceDictionary>

         <!--secondary colour--> 
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.DeepPurple.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="SecondaryHueLightBrush" Color="{StaticResource Primary100}"/>
            <SolidColorBrush x:Key="SecondaryHueLightForegroundBrush" Color="{StaticResource Primary100Foreground}"/>
            <SolidColorBrush x:Key="SecondaryHueMidBrush" Color="{StaticResource Primary500}"/>
            <SolidColorBrush x:Key="SecondaryHueMidForegroundBrush" Color="{StaticResource Primary500Foreground}"/>
            <SolidColorBrush x:Key="SecondaryHueDarkBrush" Color="{StaticResource Primary700}"/>
            <SolidColorBrush x:Key="SecondaryHueDarkForegroundBrush" Color="{StaticResource Primary700Foreground}"/>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="MaterialDesignLightBackground" Color="#FFFAFAFA" />
    <SolidColorBrush x:Key="MaterialDesignLightForeground" Color="#DD000000" />
    <SolidColorBrush x:Key="MaterialDesignDarkBackground" Color="#FF303030" />
    <SolidColorBrush x:Key="MaterialDesignDarkForeground" Color="#FFFAFAFA" />
    <SolidColorBrush x:Key="MaterialDesignDarkSeparatorBackground" Color="#1F000000" />
    <SolidColorBrush x:Key="MaterialDesignLightSeparatorBackground" Color="#1FFFFFFF" />

    <Style BasedOn="{StaticResource MaterialDesignRaisedButton}" TargetType="{x:Type Button}" />
    <Style BasedOn="{StaticResource MaterialDesignCheckBox}" TargetType="{x:Type CheckBox}" />
    <Style BasedOn="{StaticResource MaterialDesignComboBox}" TargetType="{x:Type ComboBox}" />
    <Style BasedOn="{StaticResource MaterialDesignThumb}" TargetType="{x:Type Thumb}" />
    <Style BasedOn="{StaticResource MaterialDesignExpander}" TargetType="{x:Type Expander}" />
    <Style BasedOn="{StaticResource MaterialDesignGridSplitter}" TargetType="{x:Type GridSplitter}" />
    <Style BasedOn="{StaticResource MaterialDesignGroupBox}" TargetType="{x:Type GroupBox}" />
    <Style BasedOn="{StaticResource MaterialDesignLabel}" TargetType="{x:Type Label}" />
    <Style BasedOn="{StaticResource MaterialDesignPasswordBox}" TargetType="{x:Type PasswordBox}" />
    <Style BasedOn="{StaticResource MaterialDesignRadioButton}" TargetType="{x:Type RadioButton}" />
    <Style BasedOn="{StaticResource MaterialDesignRaisedButton}" TargetType="{x:Type RepeatButton}" />
    <Style BasedOn="{StaticResource MaterialDesignScrollBar}" TargetType="{x:Type ScrollBar}" />
    <Style BasedOn="{StaticResource MaterialDesignScrollViewer}" TargetType="{x:Type ScrollViewer}" />
    <Style BasedOn="{StaticResource MaterialDesignSlider}" TargetType="{x:Type Slider}" />
    <Style BasedOn="{StaticResource MaterialDesignTabControl}" TargetType="{x:Type TabControl}" />
    <Style BasedOn="{StaticResource MaterialDesignTabItem}" TargetType="{x:Type TabItem}" />
    <Style BasedOn="{StaticResource MaterialDesignTextBox}" TargetType="{x:Type TextBox}" />
    <Style BasedOn="{StaticResource MaterialDesignSwitchToggleButton}" TargetType="{x:Type ToggleButton}" />

    <Style BasedOn="{StaticResource MaterialDesignContextMenu}" TargetType="{x:Type ContextMenu}" />
    <Style BasedOn="{StaticResource MaterialDesignMenu}" TargetType="{x:Type Menu}" />
    <Style BasedOn="{StaticResource MaterialDesignMenuItem}" TargetType="{x:Type MenuItem}" />

    <Style
        x:Key="{x:Static MenuItem.SeparatorStyleKey}"
        BasedOn="{StaticResource MaterialDesignSeparator}"
        TargetType="{x:Type Separator}" />
    <Style
        x:Key="MaterialDesignDarkSeparator"
        BasedOn="{StaticResource MaterialDesignSeparator}"
        TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignDarkSeparatorBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignDarkSeparatorBackground}" />
    </Style>
    <Style
        x:Key="MaterialDesignLightSeparator"
        BasedOn="{StaticResource MaterialDesignSeparator}"
        TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignLightSeparatorBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignLightSeparatorBackground}" />
    </Style>

    <fl:StringToRationalConverter x:Key="StringToRational"/>
    <fl:TicksToTimeConverter x:Key="TicksToTime"/>
    <fl:TicksToSecondsConverter x:Key="TicksToSeconds" />
    <fl:TicksToMilliSecondsConverter x:Key="TicksToMilliSeconds"/>
    <fl:BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
    
    <flwpf:VolumeToLevelsConverter x:Key="VolumeToLevels"/>
    <flwpf:QualityToLevelsConverter x:Key="QualityToLevels"/>
    <flwpf:CheckNullConverter x:Key="CheckNull"/>
    <flwpf:SumConverter x:Key="SumConverter"/>
    <flwpf:GetDictionaryItemConverter x:Key="GetDictionaryItem"/>
    <flwpf:MarginConverter x:Key="MarginConverter"/>
    <flwpf:BrushToHexConverter x:Key="BrushToHex"/>
    <flwpf:ColorToBrushConverter x:Key="ColorToBrush"/>
    <flwpf:ColorToHexConverter x:Key="ColorToHex"/>

    <Style
        TargetType="{x:Type MenuItem}"
        x:Key="MaterialDesignMenuItem"
        BasedOn="{x:Null}">
        <Setter
            Property="Padding"
            Value="10 0 10 0"></Setter>
        <Setter
            Property="OverridesDefaultStyle"
            Value="True" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Resources>
                        <Style
                            TargetType="materialDesign:PackIcon">
                            <Setter
                                Property="FrameworkElement.Width"
                                Value="16" />
                            <Setter
                                Property="FrameworkElement.Height"
                                Value="16" />
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid
                        ClipToBounds="True">
                        <Border
                            x:Name="templateRoot"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" />
                        <Border
                            x:Name="BackgroundRoot"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{DynamicResource PrimaryHueMidBrush}"
                            SnapsToDevicePixels="True"
                            Opacity="0" />
                        <materialDesign:Ripple
                            Background="Transparent"
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            Focusable="False"
                            Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}">
                            <Grid
                                Height="{TemplateBinding Height}"
                                Background="Transparent">
                                <Grid
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition
                                            Width="Auto"
                                            SharedSizeGroup="IconGroup" />
                                        <ColumnDefinition
                                            Width="*"
                                            SharedSizeGroup="HeaderGroup" />
                                        <ColumnDefinition
                                            Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid
                                        x:Name="IconWrapper"
                                        Visibility="Visible"
                                        Width="40"
                                        Margin="0 0 -10 0"
                                        >
                                        <ContentPresenter
                                            x:Name="Icon"
                                            Content="{TemplateBinding Icon}"
                                            ContentSource="Icon"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Height="16"
                                            Width="16"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                    <Grid
                                        x:Name="GlyphWrapper"
                                        Visibility="Collapsed"
                                        Width="40"
                                        Margin="0 0 -10 0"
                                        >
                                        <Viewbox
                                            x:Name="GlyphPanel"
                                            Width="16"
                                            Height="16"
                                            HorizontalAlignment="Left"
                                            Margin="0"
                                            Visibility="Collapsed"
                                            VerticalAlignment="Center"
                                            FlowDirection="LeftToRight">
                                            <Canvas
                                                Width="24"
                                                Height="24">
                                                <Path
                                                    Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
                                                    x:Name="Glyph"
                                                    Fill="{DynamicResource SecondaryHueMidBrush}"
                                                    FlowDirection="LeftToRight" />
                                            </Canvas>
                                        </Viewbox>
                                    </Grid>
                                    <Grid
                                        Grid.Column="1">
                                        <ContentPresenter
                                            x:Name="BoldHeaderPresenter"
                                            Visibility="Hidden"
                                            TextBlock.FontWeight="Bold"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            Content="{TemplateBinding Header}"
                                            ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                            ContentSource="Header"
                                            RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            VerticalAlignment="Center" />
                                        <ContentPresenter
                                            x:Name="HeaderPresenter"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            Content="{TemplateBinding Header}"
                                            ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                            ContentSource="Header"
                                            RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            VerticalAlignment="Center" />
                                    </Grid>
                                    <Grid
                                        x:Name="InputGestureTextWrapper"
                                        Grid.Column="2"
                                        Visibility="Collapsed">
                                        <TextBlock
                                            Visibility="{TemplateBinding InputGestureText, Converter={StaticResource StringIsEmptyVisibilityConverter}}"
                                            Margin="16 0 0 0"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Right"
                                            Text="{TemplateBinding InputGestureText}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Foreground="{TemplateBinding Foreground}" />
                                    </Grid>
                                    <Grid
                                        x:Name="SubBlock"
                                        Grid.Column="2"
                                        Visibility="Collapsed"
                                        Margin="16 0 0 0">
                                        <Path
                                            Width="5"
                                            Height="10"
                                            Stretch="Uniform"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            Data="M0,16 L8,8 L0,0 Z"
                                            Fill="{DynamicResource SecondaryHueMidBrush}"
                                            SnapsToDevicePixels="False" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </materialDesign:Ripple>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            PopupAnimation="Slide"
                            Placement="Bottom"
                            >
                            <Border
                                x:Name="SubMenuBorder"
                                Background="{DynamicResource MaterialDesignPaper}"
                                Effect="{DynamicResource MaterialDesignShadowDepth1}"
                                CornerRadius="6">

                                <Border
                                    Background="Transparent">
                                    <ScrollViewer
                                        x:Name="SubMenuScrollViewer"
                                        Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid
                                            RenderOptions.ClearTypeHint="Enabled"
                                            Margin="0 0 0 0">
                                            <Canvas
                                                HorizontalAlignment="Left"
                                                Height="0"
                                                VerticalAlignment="Top"
                                                Width="0">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                    Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                    Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                KeyboardNavigation.TabNavigation="Cycle" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--#region Roles Triggers -->
                        <Trigger
                            Property="Role"
                            Value="SubmenuHeader">
                            <Setter
                                TargetName="SubBlock"
                                Property="Visibility"
                                Value="Visible" />
                            <Setter
                                TargetName="PART_Popup"
                                Property="Placement"
                                Value="Right" />
                            <Setter
                                TargetName="PART_Popup"
                                Property="VerticalOffset"
                                Value="-16" />
                            <Setter
                                Property="Height"
                                Value="32" />
                            <Setter
                                TargetName="BoldHeaderPresenter"
                                Property="Visibility"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger
                            Property="Role"
                            Value="SubmenuItem">
                            <Setter
                                Property="Height"
                                Value="32" />
                            <Setter
                                TargetName="InputGestureTextWrapper"
                                Property="Visibility"
                                Value="Visible" />
                            <Setter
                                TargetName="BoldHeaderPresenter"
                                Property="Visibility"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger
                            Property="Role"
                            Value="TopLevelHeader">
                            <Setter
                                Property="Grid.IsSharedSizeScope"
                                Value="True" />
                            <Setter
                                Property="Padding"
                                Value="16 0" />
                            <Setter
                                Property="Height"
                                Value="48" />
                            <Setter
                                TargetName="templateRoot"
                                Property="CornerRadius"
                                Value="6" />
                            <Setter
                                TargetName="BackgroundRoot"
                                Property="CornerRadius"
                                Value="6" />
                        </Trigger>
                        <Trigger
                            Property="Role"
                            Value="TopLevelItem">
                            <Setter
                                Property="Padding"
                                Value="16 0" />
                            <Setter
                                Property="Height"
                                Value="48" />
                            <Setter
                                TargetName="templateRoot"
                                Property="CornerRadius"
                                Value="6" />
                            <Setter
                                TargetName="BackgroundRoot"
                                Property="CornerRadius"
                                Value="6" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition
                                    Property="IsSubmenuOpen"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter
                                    TargetName="HeaderPresenter"
                                    Property="TextBlock.FontWeight"
                                    Value="Bold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <!--#endregion-->

                        <Trigger
                            Property="HasDropShadow"
                            SourceName="PART_Popup"
                            Value="True">
                            <Setter
                                TargetName="SubMenuBorder"
                                Property="Margin"
                                Value="5" />
                        </Trigger>

                        <Trigger
                            Property="IsSuspendingPopupAnimation"
                            Value="True">
                            <Setter
                                Property="PopupAnimation"
                                TargetName="PART_Popup"
                                Value="None" />
                        </Trigger>
                        <Trigger
                            Property="Icon"
                            Value="{x:Null}">
                            <Setter
                                Property="Visibility"
                                TargetName="IconWrapper"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger
                            Property="IsChecked"
                            Value="True">
                            <Setter
                                Property="Visibility"
                                TargetName="GlyphPanel"
                                Value="Visible" />
                        </Trigger>
                        <Trigger
                            Property="IsCheckable"
                            Value="True">
                            <Setter
                                Property="Visibility"
                                TargetName="GlyphWrapper"
                                Value="Visible" />
                            <Setter
                                Property="Visibility"
                                TargetName="IconWrapper"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger
                            Property="IsHighlighted"
                            Value="True">
                            <Setter
                                TargetName="BackgroundRoot"
                                Property="Opacity"
                                Value="0.13" />
                        </Trigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="False">
                            <Setter
                                Property="Opacity"
                                Value=".56" />
                        </Trigger>
                        <Trigger
                            Property="CanContentScroll"
                            SourceName="SubMenuScrollViewer"
                            Value="False">
                            <Setter
                                Property="Canvas.Top"
                                TargetName="OpaqueRect"
                                Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
                            <Setter
                                Property="Canvas.Left"
                                TargetName="OpaqueRect"
                                Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style
        x:Key="MaterialDesignMenu"
        TargetType="{x:Type MenuBase}">
        <Style.Resources>
            <Style
                TargetType="MenuItem"
                BasedOn="{StaticResource MaterialDesignMenuItem}" />
        </Style.Resources>

        <Setter
            Property="Background"
            Value="{DynamicResource MaterialDesignPaper}" />
        <Setter
            Property="FontFamily"
            Value="{StaticResource MaterialDesignFont}" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter
            Property="TextBlock.FontSize"
            Value="15" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Center" />
        <Setter
            Property="UseLayoutRounding"
            Value="True" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type MenuBase}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="MaterialDesignContextMenu"
        TargetType="{x:Type ContextMenu}"
        BasedOn="{StaticResource MaterialDesignMenu}">
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type MenuBase}">
                    <AdornerDecorator>
                        <Grid>
                            <Border
                                Background="{TemplateBinding Background}"
                                Margin="0"
                                CornerRadius="6"
                                Effect="{DynamicResource MaterialDesignShadowDepth1}"></Border>

                            <Border
                                Margin="0"
                                Background="Transparent">
                                <ScrollViewer
                                    x:Name="SubMenuScrollViewer"
                                    Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid
                                        RenderOptions.ClearTypeHint="Enabled"
                                        Margin="0 0">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Popup Menu-->
    <ContextMenu x:Key="PopUpMenu">
        <MenuItem Header="Open File" Command="{Binding Player.Commands.OpenFromFileDialog}" Icon="{materialDesign:PackIcon FolderOutline}"/>
        <MenuItem Header="Open Folder" Icon="{materialDesign:PackIcon FolderOutline}" Command="{Binding OpenPlaylistDialog}" />
        <MenuItem Header="Playlist" Icon="{materialDesign:PackIcon FolderOutline}" Command="{Binding OpenPlaylistViewer}" />
        <MenuItem Header="Paste Url" Command="{Binding Player.Commands.OpenFromClipboard}" IsEnabled="{Binding CanPaste}" Icon="{materialDesign:PackIcon ContentPaste}"/>
        <Separator />

        <MenuItem Header="Audio" Icon="{materialDesign:PackIcon Audio}">
            <MenuItem Header="Enabled" IsCheckable="True" IsChecked="{Binding Config.Audio.Enabled}"/>
            <MenuItem Header="{Binding Config.Audio.Delay, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem Header="Reset..." CommandParameter="0" Command="{Binding Player.Commands.AudioDelaySet}"/>
                <Separator />
                <MenuItem Header="-   10"   CommandParameter="-10"      Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="-  100"   CommandParameter="-100"     Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="- 1000"   CommandParameter="-1000"    Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="-10000"   CommandParameter="-10000"   Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <Separator />
                <MenuItem Header="+10000"   CommandParameter="10000"    Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="+ 1000"   CommandParameter="1000"     Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="+  100"   CommandParameter="100"      Command="{Binding Player.Commands.AudioDelaySet2}"/>
                <MenuItem Header="+   10"   CommandParameter="10"       Command="{Binding Player.Commands.AudioDelaySet2}"/>
            </MenuItem>
            <MenuItem Header="Streams">
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Audio.Streams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" #{0} ({1}) {2} @{3}Hz [CH: {4}] [Bits: {5}]">
                                        <Binding Path="StreamIndex"/>
                                        <Binding Path="Language"/>
                                        <Binding Path="SampleFormatStr"/>
                                        <Binding Path="SampleRate"/>
                                        <Binding Path="Channels"/>
                                        <Binding Path="Bits"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="YoutubeDL">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource CheckNull}">
                                            <Binding Path="Player.Audio.Plugins"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:String>YoutubeDL</sys:String>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="ItemsSource" Value="{Binding Player.Audio.Plugins[YoutubeDL].AudioInputs}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" ({0}) {1} [BitRate: {2}] [{3}] [Video: {4}]">
                                        <Binding Path="Language"/>
                                        <Binding Path="Codec"/>
                                        <Binding Path="BitRate"/>
                                        <Binding Path="Protocol"/>
                                        <Binding Path="HasVideo"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
        </MenuItem>

        <MenuItem Header="Subtitles" Icon="{materialDesign:PackIcon SubtitlesOutline}">
            <MenuItem Header="Enabled" IsCheckable="True" IsChecked="{Binding Config.Subtitles.Enabled}"/>
            <MenuItem Header="Fonts..." Command="{Binding SetSubtitlesFont}"/>
            <MenuItem Header="{Binding Config.Subtitles.Delay, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem Header="Reset..." CommandParameter="0" Command="{Binding Player.Commands.SubtitlesDelaySet}"/>
                <Separator />
                <MenuItem Header="-   10"   CommandParameter="-10"      Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="-  100"   CommandParameter="-100"     Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="- 1000"   CommandParameter="-1000"    Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="-10000"   CommandParameter="-10000"   Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <Separator />
                <MenuItem Header="+10000"   CommandParameter="10000"    Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="+ 1000"   CommandParameter="1000"     Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="+  100"   CommandParameter="100"      Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
                <MenuItem Header="+   10"   CommandParameter="10"       Command="{Binding Player.Commands.SubtitlesDelaySet2}"/>
            </MenuItem>
            <MenuItem Header="{Binding Subtitles.Margin.Bottom}" HeaderStringFormat="Position Y ({0})">
                <MenuItem Header="Reset..." Command="{Binding ResetSubsPositionY}"/>
                <Separator />
                <MenuItem Header="Up"        CommandParameter="  2"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Up x 10"   CommandParameter=" 20"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Down x 10" CommandParameter="-20"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Down"      CommandParameter=" -2"     Command="{Binding SetSubsPositionY}"/>
            </MenuItem>
            <MenuItem Header="Streams">
                <MenuItem Header="External" ItemsSource="{Binding Player.Subtitles.Plugins[OpenSubtitles].SubtitlesInputs}" AlternationCount="{Binding Player.Subtitles.Plugins[OpenSubtitles].SubtitlesInputs.Count}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                            <Setter Property="Header" Value="{Binding Url}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Subtitles.Streams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" [#{0}] {1}">
                                        <Binding Path="StreamIndex"/>
                                        <Binding Path="Language"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="OpenSubtitles">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource CheckNull}">
                                            <Binding Path="Player.Subtitles.Plugins"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:String>OpenSubtitlesOrg</sys:String>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="ItemsSource" Value="{Binding Player.Subtitles.Plugins[OpenSubtitlesOrg].SubtitlesInputs}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" ({0}) {1} {2}">
                                        <Binding Path="Language"/>
                                        <Binding Path="InputData.Rating"/>
                                        <Binding Path="InputData.Title"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="YoutubeDL">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource CheckNull}">
                                            <Binding Path="Player.Audio.Plugins"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:String>YoutubeDL</sys:String>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="ItemsSource" Value="{Binding Player.Audio.Plugins[YoutubeDL].SubtitlesInputs}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" [#{0}] {1}">
                                        <Binding Path="Protocol"/>
                                        <Binding Path="Language"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Use Online DBs" IsCheckable="True" IsChecked="{Binding Config.Subtitles.UseOnlineDatabases}"/>
        </MenuItem>

        <MenuItem Header="Video" Icon="{materialDesign:PackIcon VideoOutline}">
            <MenuItem Header="Enabled" IsCheckable="True" IsChecked="{Binding Config.Video.Enabled}"/>
            <MenuItem Header="Aspect Ratio">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="Command" Value="{Binding DataContext.ChangeAspectRatio, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Chapters" ItemsSource="{Binding Player.Chapters}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="Command" Value="{Binding DataContext.Player.Commands.SeekToChapter, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                        <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
                <MenuItem.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat=" [{0}] {1}">
                                    <Binding Path="StartTime" Converter="{StaticResource TicksToTime}"/>
                                    <Binding Path="Title"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </MenuItem.ItemTemplate>
            </MenuItem>
            <MenuItem Header="HW Acceleration" IsCheckable="True" IsChecked="{Binding Config.Video.VideoAcceleration}"/>
            <MenuItem Header="Record" IsCheckable="True" IsChecked="{Binding Player.IsRecording, Mode=OneWay}" Command="{Binding Player.Commands.ToggleRecording}"/>
            <MenuItem Header="Reverse Playback" IsCheckable="True" IsChecked="{Binding Player.ReversePlayback}"/>
            <MenuItem Header="{Binding Player.Speed}" HeaderStringFormat="Speed ({0})">
                <MenuItem Header=" x 8"   CommandParameter="8" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 4"   CommandParameter="4" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 2"   CommandParameter="2" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 1"   CommandParameter="1" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 0.75"   CommandParameter="0.75" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 0.50"   CommandParameter="0.50" Command="{Binding Player.Commands.SpeedSet}"/>
                <MenuItem Header=" x 0.25"   CommandParameter="0.25" Command="{Binding Player.Commands.SpeedSet}"/>
            </MenuItem>
            <MenuItem Header="Streams">
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Video.Streams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" {0}x{1} @{2:#,#.00} ({3}/{4})">
                                        <Binding Path="Width"/>
                                        <Binding Path="Height"/>
                                        <Binding Path="FPS"/>
                                        <Binding Path="Codec"/>
                                        <Binding Path="PixelFormatStr"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <!--<MenuItem Header="{Binding Player.decoder.OpenedPlugin.Name}" ItemsSource="{Binding Player.Video.Inputs}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" {0}x{1} @{2} ({3}) [{4}] [Audio:{5}]">
                                        <Binding Path="Width"/>
                                        <Binding Path="Height"/>
                                        <Binding Path="FPS"/>
                                        <Binding Path="Codec"/>
                                        <Binding Path="Protocol"/>
                                        <Binding Path="HasAudio"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>-->
                
                
                <MenuItem Header="External" ItemsSource="{Binding Player.Video.Plugins[OpenVideo].VideoInputs}" AlternationCount="{Binding Player.Video.Plugins[OpenVideo].VideoInputs.Count}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                            <Setter Property="Header" Value="{Binding Url}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="BitSwarm">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource CheckNull}">
                                            <Binding Path="Player.Video.Plugins"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:String>BitSwarm</sys:String>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="ItemsSource" Value="{Binding Player.Video.Plugins[BitSwarm].VideoInputs}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                            <Setter Property="Header" Value="{Binding InputData.Title}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="YoutubeDL">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource CheckNull}">
                                            <Binding Path="Player.Video.Plugins"/>
                                            <Binding>
                                                <Binding.Source>
                                                    <sys:String>YoutubeDL</sys:String>
                                                </Binding.Source>
                                            </Binding>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="ItemsSource" Value="{Binding Player.Video.Plugins[YoutubeDL].VideoInputs}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" {0}x{1} @{2} ({3}) [{4}] [Audio:{5}]">
                                        <Binding Path="Width"/>
                                        <Binding Path="Height"/>
                                        <Binding Path="FPS"/>
                                        <Binding Path="Codec"/>
                                        <Binding Path="Protocol"/>
                                        <Binding Path="HasAudio"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>

            <MenuItem Header="Take a Snapshot" Command="{Binding Player.Commands.TakeSnapshot}" Icon="{materialDesign:PackIcon Kind=PhotoCamera}"/>
            <MenuItem Header="V.Sync" IsCheckable="True" IsChecked="{Binding Config.Video.VSync}"/>
            <MenuItem Header="Zoom">
                <MenuItem Header="Reset ..." Command="{Binding Player.Commands.ResetAll}"/>
                <MenuItem Header="Zoom In"   Command="{Binding Player.Commands.ZoomIn}" Icon="{materialDesign:PackIcon Kind=ZoomIn}"/>
                <MenuItem Header="Zoom out"  Command="{Binding Player.Commands.ZoomOut}" Icon="{materialDesign:PackIcon Kind=ZoomOut}"/>
            </MenuItem>
        </MenuItem>

        <Separator />
        <MenuItem Header="Show Debug" IsCheckable="True" IsChecked="{Binding ShowDebug}"/>

        <Separator />
        <MenuItem Header="Exit" Icon="{materialDesign:PackIcon ExitToApp}" Command="{Binding ExitApplication}"/>
    </ContextMenu>
    
    <!-- Bar Sliders-->
    <flwpf:BooleanAllConverter  x:Key="BooleanAllConverter"/>
    <flwpf:InvertBooleanConverter  x:Key="InvertBooleanConverter"/>
    <flwpf:SliderValueLabelPositionConverter  x:Key="SliderValueLabelPositionConverter"/>
    
    <Style x:Key="MaterialDesignRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignSliderThumb" TargetType="{x:Type Thumb}">
        <Grid x:Name="thumbGrid" Height="10" Width="8">
            <AdornerDecorator>
                <AdornerDecorator.CacheMode>
                    <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </AdornerDecorator.CacheMode>
                <Ellipse
                    x:Name="grip"
                    Fill="{DynamicResource MaterialDesignBody}"
                    Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Slider}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                    Margin="-1,0" />
            </AdornerDecorator>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="MaterialDesignSliderHorizontal" TargetType="{x:Type Slider}">
        <Border
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True"
            UseLayoutRounding="True">
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Rectangle Grid.Row="1" Fill="{TemplateBinding Foreground}" Height="4" Opacity="0.38" VerticalAlignment="Center" RadiusX="2" RadiusY="2" />
                <Border
                    x:Name="activeTrack"
                    Grid.Row="1"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="3,0,0,3"
                    Height="5"
                    Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center" />
                <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
                <Canvas Grid.Row="1" VerticalAlignment="Center" Height="3">
                    <Rectangle x:Name="PART_SelectionRange" Fill="{TemplateBinding Foreground}" Height="3" Visibility="Collapsed" />
                </Canvas>
                <Track x:Name="PART_Track" Grid.Row="1" Height="20">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                    </Track.IncreaseRepeatButton>
                    <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                    <Track.Thumb>
                        <Thumb Template="{StaticResource MaterialDesignSliderThumb}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Foreground="{TemplateBinding Foreground}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter TargetName="activeTrack" Property="CornerRadius" Value="0,3,3,0" />
                <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FlyleafSlider" TargetType="{x:Type Slider}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignSliderHorizontal}"/>
    </Style>

</ResourceDictionary>
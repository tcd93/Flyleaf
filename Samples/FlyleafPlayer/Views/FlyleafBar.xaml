<UserControl x:Class="FlyleafPlayer.Views.FlyleafBar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:FlyleafPlayer.Views"
             mc:Ignorable="d" 
             
             d:Foreground="White"
             
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             d:DesignHeight="60" d:DesignWidth="600">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/FlyleafPlayer;component/Resources/MainDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <materialDesign:PackIcon x:Key="MixerIcon" Kind="MixerSettings" Width="24" Height="24" Foreground="{DynamicResource PrimaryHueMidBrush}" />

            <Style TargetType="{x:Type materialDesign:PopupBox}" BasedOn="{StaticResource MaterialDesignMultiFloatingActionAccentPopupBox}">
                <Setter Property="ToggleContent" Value="{StaticResource MixerIcon}"/>
                <Setter Property="Width" Value="32"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
            </Style>

            <Style TargetType="materialDesign:PackIcon">
                <Setter Property="Height" Value="15"/>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid VerticalAlignment="Bottom" Margin="0 2 0 2">
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseMove">
                <i:InvokeCommandAction Command="{Binding Player.Commands.RefreshFullActive}"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <Grid Margin="10,0,10,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <!--Current Time | Slider | Duration-->
            <TextBlock Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" d:Text="00:00:00" Text="{Binding Player.CurTime, Converter={StaticResource TicksToTime}}"/>
            <Slider Grid.Column="1" Margin="10,0,10,0" VerticalAlignment="Center" IsSelectionRangeEnabled="True" SelectionStart="{Binding RelativeSource={RelativeSource Self}, Path=Value, Mode=OneWay}" Style="{DynamicResource FlyleafSlider}" Focusable="False" Value="{Binding Player.CurTime, Mode=TwoWay, Converter={StaticResource TicksToSeconds}}" Maximum="{Binding Player.Duration, Converter={StaticResource TicksToSeconds}}">
                <Slider.SelectionEnd>
                    <MultiBinding Converter="{StaticResource SumConverter}">
                        <Binding Path="SelectionStart" RelativeSource="{RelativeSource Self}" Mode="OneWay"/>
                        <Binding Path="Player.BufferedDuration" Converter="{StaticResource TicksToSeconds}" Mode="OneWay"/>
                    </MultiBinding>
                </Slider.SelectionEnd>
            </Slider>
            <TextBlock Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" d:Text="01:42:23" Text="{Binding Player.Duration, Converter={StaticResource TicksToTime}}"/>
        </Grid>

        <Grid Grid.Row="1" Margin="0,0,3,0">
            <Grid.Resources>
                <ResourceDictionary>
                    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignIconButton}">
                        <Setter Property="Width" Value="32"/>
                        <Setter Property="Height" Value="32"/>
                        <Setter Property="Focusable" Value="False"/>
                    </Style>
                </ResourceDictionary>
            </Grid.Resources>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <!--Play / Pause Button-->
            <Button Grid.Column="0" Command="{Binding Player.Commands.TogglePlayPause}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource IconButton}">
                        <Setter Property="Content" Value="{materialDesign:PackIcon Kind=Play}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Player.Status}" Value="Playing">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=Pause}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <!--Subtitles Button-->
            <Button Grid.Column="1" Command="{Binding ShowSubtitlesMenu}" x:Name="PART_ContextMenuOwner_Subtitles" Foreground="{DynamicResource SecondaryHueMidBrush}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource IconButton}">
                        <Setter Property="Content" Value="{materialDesign:PackIcon Kind=CcOutline}"/>
                    </Style>
                </Button.Style>
            </Button>

            <!--Video Quality-->
            <Button Grid.Column="2" x:Name="PART_ContextMenuOwner_Video" Command="{Binding ShowVideoMenu}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource IconButton}">
                        <Setter Property="Content" Value="" d:Value="{materialDesign:PackIcon Kind=QualityHigh}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Player.Video.Height, Converter={StaticResource QualityToLevels}}" Value="Low">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=QualityLow}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Video.Height, Converter={StaticResource QualityToLevels}}" Value="Med">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=QualityMedium}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Video.Height, Converter={StaticResource QualityToLevels}}" Value="High">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=QualityHigh}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Video.Height, Converter={StaticResource QualityToLevels}}" Value="_4K">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=Video4kBox}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <!--Movie Title-->
            <TextBlock Grid.Column="3" FontSize="14" VerticalAlignment="Center" FontStyle="Italic" Margin="5,0,0,0" Text="{Binding Player.Playlist.Selected.Title}" d:Text="Movie Title"/>

            <!--Live Stream-->
            <!--<materialDesign:PackIcon Kind="VideoInputAntenna" Margin="5 2 0 0" Foreground="{DynamicResource SecondaryHueMidBrush}" Visibility="{Binding Player.IsLive, Converter={StaticResource BooleanToVisibility}}"/>-->

            <!--Video Filters-->
            <materialDesign:PopupBox Grid.Column="3" PlacementMode="TopAndAlignCentres" materialDesign:RippleAssist.Feedback="{DynamicResource PrimaryHueMidBrush}" StaysOpen="True" TextElement.Foreground="White">
                <StackPanel Margin="20" Background="#7d000000">
                    <ItemsControl ItemsSource="{Binding Config.Video.Filters.Values}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Visibility="{Binding Available, Converter={StaticResource BooleanToVisibility}}">
                                    <TextBlock Text="{Binding Filter}" Margin="0,0,0,0"  VerticalAlignment="Center" Width="90"/>
                                    <Slider Width="150" Style="{StaticResource MaterialDesignDiscreteSlider}" Value="{Binding Value, Mode=TwoWay}" Minimum="{Binding Minimum}" Maximum="{Binding Maximum}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </materialDesign:PopupBox>

            <!--Volume Button (Mute/Unmute)-->
            <Button Grid.Column="4" VerticalAlignment="Center" Foreground="{DynamicResource SecondaryHueMidBrush}" Command="{Binding Player.Commands.ToggleMute}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource IconButton}">
                        <Setter Property="Content" Value="{materialDesign:PackIcon Kind=VolumeHigh}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Player.Audio.Volume, Converter={StaticResource VolumeToLevels}}" Value="Mute">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=VolumeMute}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Audio.Volume, Converter={StaticResource VolumeToLevels}}" Value="Low">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=VolumeLow}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Audio.Volume, Converter={StaticResource VolumeToLevels}}" Value="Med">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=VolumeMedium}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Player.Audio.Mute}" Value="True">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=VolumeMute}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <!--Volume Slider-->
            <Slider Grid.Column="5" Margin="0 0 10 0" VerticalAlignment="Center" Width="100" Style="{DynamicResource FlyleafSlider}" Foreground="{DynamicResource SecondaryHueMidBrush}" Focusable="False" Minimum="0" Maximum="{Binding Config.Player.VolumeMax, Mode=OneWay}" Value="{Binding Player.Audio.Volume}"/>

            <!--Settings-->
            <Button Grid.Column="6" Style="{StaticResource IconButton}" Content="{materialDesign:PackIcon Kind=SettingsOutline}" Command="{Binding OpenSettings}"/>

            <!--Toggle Fullscreen-->
            <Button Grid.Column="7" Command="{Binding Player.Commands.ToggleFullScreen}" Foreground="{DynamicResource SecondaryHueMidBrush}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource IconButton}">
                        <Setter Property="Content" Value="{materialDesign:PackIcon Kind=Fullscreen}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Player.IsFullScreen}" Value="true">
                                <Setter Property="Content" Value="{materialDesign:PackIcon Kind=FullscreenExit}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

        </Grid>
    </Grid>
</UserControl>
